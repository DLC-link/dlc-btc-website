diff --git a/src/app/hooks/use-bitcoin.ts b/src/app/hooks/use-bitcoin.ts
index a023fdb..d9794a6 100644
--- a/src/app/hooks/use-bitcoin.ts
+++ b/src/app/hooks/use-bitcoin.ts
@@ -1,7 +1,7 @@
 import { customShiftValue } from '@common/utilities';
 import { BitcoinNetwork } from '@models/bitcoin-network';
 import { BitcoinError } from '@models/error-types';
-import { ethereumArbitrum } from '@models/ethereum-network';
+import { ethereumArbSepolia } from '@models/ethereum-network';
 import { Vault } from '@models/vault';
 import { bytesToHex, hexToBytes } from '@noble/hashes/utils';
 import { hex } from '@scure/base';
@@ -157,7 +157,7 @@ export function useBitcoin(): UseBitcoinReturnType {
       const response = await fetch(mempoolSpaceAPIFeeURL);
       const feeRates: FeeRates = await response.json();
 
-      return feeRates.fastestFee;
+      return feeRates.hourFee;
     } catch (error) {
       throw new BitcoinError(`Error getting Fee Rate: ${error}`);
     }
@@ -334,11 +334,12 @@ export function useBitcoin(): UseBitcoinReturnType {
       },
     ];
 
-    const feeRate = BigInt(await getFeeRate());
+    // TODO: Replace 2n with the fee rate from the mempool.space API
+    // const feeRate = BigInt(await getFeeRate());
 
     const selected = btc.selectUTXO(inputs, outputs, 'default', {
       changeAddress: userNativeSegwitAddress,
-      feePerByte: feeRate,
+      feePerByte: 2n,
       bip69: false,
       createTx: true,
       network: bitcoinNetwork,
@@ -412,7 +413,7 @@ export function useBitcoin(): UseBitcoinReturnType {
     const userTaprootAddress = userAddresses[1] as BitcoinTaprootAddress;
     const userPublicKey = userTaprootAddress.tweakedPublicKey;
 
-    const attestorGroupPublicKey = await getAttestorGroupPublicKey(ethereumArbitrum);
+    const attestorGroupPublicKey = await getAttestorGroupPublicKey(ethereumArbSepolia);
 
     const userUTXOs = await getUTXOs(userAddresses[0] as BitcoinNativeSegwitAddress);
     const multisigTransaction = createMultisigTransaction(
diff --git a/src/app/hooks/use-confirmation-checker.ts b/src/app/hooks/use-confirmation-checker.ts
index d31905c..11b32f0 100644
--- a/src/app/hooks/use-confirmation-checker.ts
+++ b/src/app/hooks/use-confirmation-checker.ts
@@ -59,7 +59,7 @@ export function useConfirmationChecker(vault?: Vault): number {
     )
       return;
 
-    const blockHeightDifference = (blockHeight as number) + 1 - (blockHeightAtBroadcast as number);
+    const blockHeightDifference = (blockHeight as number) - (blockHeightAtBroadcast as number);
     if (typeof blockHeightDifference === 'number' && blockHeightDifference >= 0) {
       setTransactionProgress(blockHeightDifference);
     }
diff --git a/src/app/hooks/use-endpoints.ts b/src/app/hooks/use-endpoints.ts
index 8a91ea4..03247fe 100644
--- a/src/app/hooks/use-endpoints.ts
+++ b/src/app/hooks/use-endpoints.ts
@@ -97,11 +97,23 @@ export function useEndpoints(): NetworkEndpoints {
     }
 
     switch (network?.id) {
-      case EthereumNetworkID.ArbSepolia:
+      case EthereumNetworkID.Sepolia:
         return {
           attestorAPIURLs,
-          ethereumExplorerAPIURL: 'https://sepolia.arbiscan.io/tx/',
-          ethereumAttestorChainID: 'evm-arbsepolia',
+          ethereumExplorerAPIURL: 'https://sepolia.etherscan.io/tx/',
+          ethereumAttestorChainID: 'evm-sepolia',
+          enabledEthereumNetworks,
+          bitcoinExplorerAPIURL,
+          bitcoinBlockchainAPIURL,
+          mempoolSpaceAPIFeeURL,
+          bitcoinNetwork,
+          bitcoinNetworkName,
+        };
+      case EthereumNetworkID.Goerli:
+        return {
+          attestorAPIURLs,
+          ethereumExplorerAPIURL: 'https://goerli.etherscan.io/tx/',
+          ethereumAttestorChainID: 'evm-goerli',
           enabledEthereumNetworks,
           bitcoinExplorerAPIURL,
           bitcoinBlockchainAPIURL,
@@ -109,11 +121,23 @@ export function useEndpoints(): NetworkEndpoints {
           bitcoinNetwork,
           bitcoinNetworkName,
         };
-      case EthereumNetworkID.Arbitrum:
+      case EthereumNetworkID.X1Testnet:
         return {
           attestorAPIURLs,
-          ethereumExplorerAPIURL: 'https://arbiscan.io/tx/',
-          ethereumAttestorChainID: 'evm-arbitrum',
+          ethereumExplorerAPIURL: 'https://www.oklink.com/x1-test/tx/',
+          ethereumAttestorChainID: 'evm-x1-test',
+          enabledEthereumNetworks,
+          bitcoinExplorerAPIURL,
+          bitcoinBlockchainAPIURL,
+          mempoolSpaceAPIFeeURL,
+          bitcoinNetwork,
+          bitcoinNetworkName,
+        };
+      case EthereumNetworkID.ArbSepolia:
+        return {
+          attestorAPIURLs,
+          ethereumExplorerAPIURL: 'https://sepolia.arbiscan.io/tx/',
+          ethereumAttestorChainID: 'evm-arbsepolia',
           enabledEthereumNetworks,
           bitcoinExplorerAPIURL,
           bitcoinBlockchainAPIURL,
diff --git a/src/app/hooks/use-ethereum-contracts.ts b/src/app/hooks/use-ethereum-contracts.ts
index d245ab7..55794cb 100644
--- a/src/app/hooks/use-ethereum-contracts.ts
+++ b/src/app/hooks/use-ethereum-contracts.ts
@@ -52,7 +52,9 @@ export function useEthereumContracts(): UseEthereumContractsReturnType {
       const contract = new ethers.Contract(
         observerProtocolContractData.contract.address,
         observerProtocolContractData.contract.abi,
-        new ethers.providers.WebSocketProvider(import.meta.env.VITE_ARBITRUM_OBSERVER_NODE)
+        new ethers.providers.WebSocketProvider(
+          import.meta.env.VITE_ETHEREUM_ARB_SEPOLIA_OBSERVER_NODE
+        )
       );
       observerProtocolContract.current = contract;
     }
diff --git a/src/app/hooks/use-proof-of-reserve.ts b/src/app/hooks/use-proof-of-reserve.ts
index 3bbdd97..e22277e 100644
--- a/src/app/hooks/use-proof-of-reserve.ts
+++ b/src/app/hooks/use-proof-of-reserve.ts
@@ -4,7 +4,7 @@ import { useQuery } from 'react-query';
 import { customShiftValue } from '@common/utilities';
 import { BitcoinNetwork } from '@models/bitcoin-network';
 import { BitcoinTransaction, BitcoinTransactionVectorOutput } from '@models/bitcoin-transaction';
-import { ethereumArbitrum } from '@models/ethereum-network';
+import { ethereumArbSepolia } from '@models/ethereum-network';
 import { RawVault } from '@models/vault';
 import { hex } from '@scure/base';
 import { p2tr, p2tr_ns, taprootTweakPubkey } from '@scure/btc-signer';
@@ -151,7 +151,7 @@ export function useProofOfReserve(): UseProofOfReserveReturnType {
       );
 
       // Get the Attestor Public Key from the Attestor Group
-      const attestorPublicKey = await getAttestorGroupPublicKey(ethereumArbitrum);
+      const attestorPublicKey = await getAttestorGroupPublicKey(ethereumArbSepolia);
 
       // Create two MultiSig Transactions, because the User and Attestor can sign in any order
       // Create the MultiSig Transaction A
diff --git a/src/app/hooks/use-vaults.ts b/src/app/hooks/use-vaults.ts
index 3cfffd5..0344cad 100644
--- a/src/app/hooks/use-vaults.ts
+++ b/src/app/hooks/use-vaults.ts
@@ -41,41 +41,41 @@ export function useVaults(): UseVaultsReturnType {
   }, [contractsLoaded]);
 
   const allVaults = useMemo(
-    () => [...vaults[network ? network.id : '42161']].sort((a, b) => b.timestamp - a.timestamp),
+    () => [...vaults[network ? network.id : '1']].sort((a, b) => b.timestamp - a.timestamp),
     [vaults, network]
   );
 
   const readyVaults = useMemo(
     () =>
-      vaults[network ? network.id : '42161']
+      vaults[network ? network.id : '1']
         .filter(vault => vault.state === VaultState.READY)
         .sort((a, b) => b.timestamp - a.timestamp),
     [vaults, network]
   );
   const fundedVaults = useMemo(
     () =>
-      vaults[network ? network.id : '42161']
+      vaults[network ? network.id : '1']
         .filter(vault => vault.state === VaultState.FUNDED)
         .sort((a, b) => b.timestamp - a.timestamp),
     [vaults, network]
   );
   const fundingVaults = useMemo(
     () =>
-      vaults[network ? network.id : '42161']
+      vaults[network ? network.id : '1']
         .filter(vault => vault.state === VaultState.FUNDING)
         .sort((a, b) => b.timestamp - a.timestamp),
     [vaults, network]
   );
   const closingVaults = useMemo(
     () =>
-      vaults[network ? network.id : '42161']
+      vaults[network ? network.id : '1']
         .filter(vault => vault.state === VaultState.CLOSING)
         .sort((a, b) => b.timestamp - a.timestamp),
     [vaults, network]
   );
   const closedVaults = useMemo(
     () =>
-      vaults[network ? network.id : '42161']
+      vaults[network ? network.id : '1']
         .filter(vault => vault.state === VaultState.CLOSED)
         .sort((a, b) => b.timestamp - a.timestamp),
     [vaults, network]
diff --git a/src/app/store/index.ts b/src/app/store/index.ts
index 766408a..5ac7d54 100644
--- a/src/app/store/index.ts
+++ b/src/app/store/index.ts
@@ -1,9 +1,13 @@
+// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+// @ts-nocheck
+import { EthereumNetworkID } from '@models/ethereum-network';
 import { combineReducers, configureStore } from '@reduxjs/toolkit';
 import { accountSlice, initialAccountState } from '@store/slices/account/account.slice';
 import { modalSlice } from '@store/slices/modal/modal.slice';
 import { vaultSlice } from '@store/slices/vault/vault.slice';
 import {
   FLUSH,
+  MigrationManifest,
   PAUSE,
   PERSIST,
   PURGE,
@@ -14,6 +18,7 @@ import {
   persistStore,
 } from 'redux-persist';
 import expireReducer from 'redux-persist-expire';
+import createMigrate from 'redux-persist/es/createMigrate';
 import autoMergeLevel2 from 'redux-persist/es/stateReconciler/autoMergeLevel2';
 import storage from 'redux-persist/lib/storage';
 
@@ -33,10 +38,26 @@ const rootReducer = combineReducers({
   mintunmint: mintUnmintSlice.reducer,
 });
 
+const migrations: MigrationManifest = {
+  1: state => {
+    return {
+      ...state,
+      vault: {
+        ...state.vault,
+        vaults: {
+          ...state.vault.vaults,
+          [EthereumNetworkID.ArbSepolia]: [],
+        },
+      },
+    };
+  },
+};
+
 const persistConfig: PersistConfig<RootState> = {
   key: 'root',
   version: 1,
   storage: storage,
+  migrate: createMigrate(migrations),
   stateReconciler: autoMergeLevel2,
   whitelist: ['account', 'vault'],
   transforms: [
diff --git a/src/app/store/slices/account/account.slice.ts b/src/app/store/slices/account/account.slice.ts
index e72ee3b..02090fe 100644
--- a/src/app/store/slices/account/account.slice.ts
+++ b/src/app/store/slices/account/account.slice.ts
@@ -1,4 +1,4 @@
-import { EthereumNetwork, ethereumArbitrum } from '@models/ethereum-network';
+import { EthereumNetwork, ethereumArbSepolia } from '@models/ethereum-network';
 import { WalletType } from '@models/wallet';
 import { createSlice } from '@reduxjs/toolkit';
 
@@ -14,7 +14,7 @@ interface AccountState {
 export const initialAccountState: AccountState = {
   address: undefined,
   walletType: WalletType.Metamask,
-  network: ethereumArbitrum,
+  network: ethereumArbSepolia,
   dlcBTCBalance: 0,
   lockedBTCBalance: 0,
   loadedAt: undefined,
diff --git a/src/app/store/slices/vault/vault.slice.ts b/src/app/store/slices/vault/vault.slice.ts
index e9e1a10..fbccfee 100644
--- a/src/app/store/slices/vault/vault.slice.ts
+++ b/src/app/store/slices/vault/vault.slice.ts
@@ -10,8 +10,11 @@ interface VaultSliceState {
 
 const initialVaultState: VaultSliceState = {
   vaults: {
+    [EthereumNetworkID.Mainnet]: [],
+    [EthereumNetworkID.Goerli]: [],
+    [EthereumNetworkID.Sepolia]: [],
+    [EthereumNetworkID.X1Testnet]: [],
     [EthereumNetworkID.ArbSepolia]: [],
-    [EthereumNetworkID.Arbitrum]: [],
   },
   status: 'idle',
   error: null,
diff --git a/src/shared/models/ethereum-network.ts b/src/shared/models/ethereum-network.ts
index 405243d..c5dc47b 100644
--- a/src/shared/models/ethereum-network.ts
+++ b/src/shared/models/ethereum-network.ts
@@ -6,29 +6,62 @@ export interface EthereumNetwork {
 }
 
 export enum EthereumNetworkID {
+  Mainnet = '1',
+  Goerli = '5',
+  Sepolia = '11155111',
+  X1Testnet = '195',
   ArbSepolia = '421614',
-  Arbitrum = '42161',
 }
 
-const ethereumArbSepolia: EthereumNetwork = {
+const ethereumOKXTestnet: EthereumNetwork = {
+  name: 'X1Test',
+  displayName: 'X1 Testnet',
+  id: EthereumNetworkID.X1Testnet,
+  defaultNodeURL: 'https://testrpc.x1.tech',
+};
+
+const ethereumMainnet: EthereumNetwork = {
+  name: 'Mainnet',
+  displayName: 'ETH Mainnet',
+  id: EthereumNetworkID.Mainnet,
+  defaultNodeURL: 'https://mainnet.infura.io/v3/',
+};
+
+const ethereumGoerli: EthereumNetwork = {
+  name: 'Goerli',
+  displayName: 'Goerli',
+  id: EthereumNetworkID.Goerli,
+  defaultNodeURL: 'https://ethereum-goerli.publicnode.com',
+};
+
+const ethereumSepolia: EthereumNetwork = {
+  name: 'Sepolia',
+  displayName: 'Sepolia',
+  id: EthereumNetworkID.Sepolia,
+  defaultNodeURL: 'https://ethereum-sepolia.publicnode.com/',
+};
+
+export const ethereumArbSepolia: EthereumNetwork = {
   name: 'ArbSepolia',
   displayName: 'Arbitrum Sepolia',
   id: EthereumNetworkID.ArbSepolia,
   defaultNodeURL: 'https://sepolia-rollup.arbitrum.io/rpc',
 };
 
-export const ethereumArbitrum: EthereumNetwork = {
-  name: 'Arbitrum',
-  displayName: 'Arbitrum',
-  id: EthereumNetworkID.Arbitrum,
-  defaultNodeURL: 'https://arb1.arbitrum.io/rpc',
-};
-
-export const ethereumNetworks: EthereumNetwork[] = [ethereumArbSepolia, ethereumArbitrum];
+export const ethereumNetworks: EthereumNetwork[] = [
+  ethereumMainnet,
+  ethereumGoerli,
+  ethereumSepolia,
+  ethereumOKXTestnet,
+  ethereumArbSepolia,
+];
 
 export const hexChainIDs: { [key in EthereumNetworkID]: string } = {
+  [EthereumNetworkID.Mainnet]: '0x1',
+  [EthereumNetworkID.Goerli]: '0x5',
+  [EthereumNetworkID.Sepolia]: '0xAA36A7',
+  [EthereumNetworkID.X1Testnet]: '0x3C',
   [EthereumNetworkID.ArbSepolia]: '0x66eee',
-  [EthereumNetworkID.Arbitrum]: '0xa4b1',
 };
 
 export const addNetworkParams = {
@@ -45,17 +78,57 @@ export const addNetworkParams = {
       blockExplorerUrls: ['https://sepolia.arbiscan.io/'],
     },
   ],
-  [EthereumNetworkID.Arbitrum]: [
+
+  [EthereumNetworkID.X1Testnet]: [
+    {
+      chainId: '0xC3',
+      rpcUrls: ['https://testrpc.x1.tech', 'https://x1testrpc.okx.com/'],
+      chainName: 'X1 testnet',
+      nativeCurrency: {
+        name: 'OKB',
+        symbol: 'OKB',
+        decimals: 18,
+      },
+      blockExplorerUrls: ['https://www.oklink.com/x1-test'],
+    },
+  ],
+  [EthereumNetworkID.Sepolia]: [
+    {
+      chainId: '11155111',
+      rpcUrls: ['https://ethereum-sepolia.publicnode.com/', 'https://sepolia.infura.io/v3/'],
+      chainName: 'Sepolia Testnet',
+      nativeCurrency: {
+        name: 'SepoliaETH',
+        symbol: 'SepoliaETH',
+        decimals: 18,
+      },
+      blockExplorerUrls: ['https://sepolia.etherscan.io/'],
+    },
+  ],
+  [EthereumNetworkID.Goerli]: [
+    {
+      chainId: '5',
+      rpcUrls: ['https://ethereum-goerli.publicnode.com', 'https://goerli.infura.io/v3/'],
+      chainName: 'Goerli Testnet',
+      nativeCurrency: {
+        name: 'GoerliETH',
+        symbol: 'GoerliETH',
+        decimals: 18,
+      },
+      blockExplorerUrls: ['https://goerli.etherscan.io/'],
+    },
+  ],
+  [EthereumNetworkID.Mainnet]: [
     {
-      chainId: '42161',
-      rpcUrls: ['https://arb1.arbitrum.io/rpc', 'https://arbitrum-mainnet.infura.io'],
-      chainName: 'Arbitrum One',
+      chainId: '1',
+      rpcUrls: ['https://mainnet.infura.io/v3/'],
+      chainName: 'Ethereum Mainnet',
       nativeCurrency: {
         name: 'ETH',
         symbol: 'ETH',
         decimals: 18,
       },
-      blockExplorerUrls: ['https://arbiscan.io/'],
+      blockExplorerUrls: ['https://etherscan.io/'],
     },
   ],
 };
